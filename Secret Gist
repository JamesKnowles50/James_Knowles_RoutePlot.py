'''This the Python Route Plotter program written for the final exercise for the JHub Coding Scheme 
   re-written by James Knowles and completed on 21/9/2022 vers 2.0'''
import time#import the time module for pausing
import os#import the standard OS modules
try:#create a test to see if the numpy module has been installed
   import numpy as np#use the numpy rotate function to correct the array.
   rotate = True#set rotate to true
except ModuleNotFoundError:#check for an error
   print("\n!The 'numpy as np' library was not found and is required!")
except NameError:#check for an error
   print("\n!The 'numpy as np' library was not found and is required!")   
else:
   pass#pass and continue

route_list = []#create a list called route_list
route_list2 = []#create another blank list
txt_file = ''#creates a blank

def final_grid():
    '''This function creates the grid and prints out the complete route direction'''
    grid = []#set grid to a blank list
    print("Grid Layout\n")
    for x in range(6):#create a loop that runs from 1 to 6
        grid.append([" "] * 12)#add a string with a space 12 times to list in a single dimension
        grid.append([" "] * 12)#add a string with a space 12 times to list in creating a further dimension
    row_number, col_number = 12, 12#set varaibles for the row and coloumns numbers to be printed along the grid edges
    for j, k in zip(route_list2[::2],route_list2[1::2]):# a nice way to slice the frst two elements from a list
        j -= 1#take away 1
        k -= 1# take away 1
        grid[j][k] = 'X'#print a red X based on the two coordinates taken from the list
    if rotate == True:#set a condition for the numpy grid function to be used
        grid=np.rot90(grid, k=1, axes=(0, 1))#numpy rotate function, to rotate the array about its axis to make it sit on the correct plane.
    else:
        grid.reverse()#reverse the grid. An attempt to present the final data correctly.
    for row in grid:#create a simple for loop within the grid list
        print("----"*13)#print a series of string character 13 times covering the top of the grid
        print(format(row_number,'02'), end="")#print a row number with a an extra zero, at the start of each subsequent row
        row_number -= 1#reduce the row number, so it starts at 1 and ends at 12. In fact it starts at zero
        for cell in row:#create a further loop at the end of the current row 
            print(" | {: >1}".format(cell), end="")#prints a vertical line in the middle
        print(" | ")#prints a further vertical line on the next line down
    print("    ", end="")#print a space
    for col in range(1,col_number+1):#creates a loop from 1 to 13
        print(f"{col:02}  ", end="")#print a row of numbers along the bottom at a set number of spaces

def create_route_list(txt_file):
    '''Function that opens a text file and stores its contents into a list and returns the list to the main program'''
    global route
    while flag:#set a conditional variable to create a loop
        txt_file = input("\nEnter the name of the route instruction file or enter 'STOP' to end the program: ")
        print("")
        if txt_file == 'STOP':#create a condtional for the user input
            S =  "\nThank You For Using The PYTHON ROUTE PLOTTER Program\n"#print a little message
            print("_".join(S).upper())#join the underscores with the main text
            exit()#exit the program
        try:#create a try and exception routine to check if the user entered file exists
            dirname = os.path.dirname(__file__)
            filename = os.path.join(dirname, txt_file)
            #open the chosen directory, the user selected file, read only and named as list
            with open(filename, 'r') as list:
                for line in list:#create a loop to run through the text file
                    route = line.strip('\n').lower()#remove newline added onto each direction, if added
                    route_list.append(route)#add the list data to the route list 
        except FileNotFoundError:#create an exception for a file not being found, print the file and stop the program
            s = "'"#create a string character for speech marks
            print(f"File {s}{txt_file}{s} not found.")#print out an error message
        else:# create an else exception if the file is located and return the new list back to the main program
            print(txt_file + '\n')
            return route_list#return the route_list function back to the main call                 

def starting_route_instruction(route_list):
    '''Function that examines the contents of the text file and converted them into coordinates and stores them in a list'''
    global route_list2
    a,b = route_list[0:2]#slice the first two elements if the list and assign them to a,b
    a = (int(a))#make a an integer
    b = (int(b))#make b an integer
    route_list2.append(a)#add value a to list2
    route_list2.append(b)#add value b to list2

    #How to deal with the cardinal points using loops
    for cardinal in route_list: #create a loop running through the txt list
        if cardinal == 's':#conditional for South
            a = a #adjust the coordinate to fit the array
            b = b - 1 #adjust the coordinate to fit the array
            route_list2.append(a)#add to list
            route_list2.append(b)#add to list

        elif cardinal == 'w':#conditional for West
            a = a - 1#adjust the coordinate to fit the array
            b = b#adjust the coordinate to fit the array
            route_list2.append(a)#add to list
            route_list2.append(b)#add to list
  
        elif cardinal == 'e':#conditional for East
            a = a + 1#adjust the coordinate to fit the array
            b = b#adjust the coordinate to fit the array
            route_list2.append(a)#add to list
            route_list2.append(b)#add to list

        elif cardinal == 'n':#conditional for North
            a = a #adjust the coordinate to fit the array
            b = b + 1#adjust the coordinate to fit the array
            route_list2.append(a)#add to list
            route_list2.append(b)#add to list
  
        if a < 1 or b < 1 or a > 12 or b > 12:#create a condtional if the route goes out of the grid bounds  
            print("!!!ERROR: The Route Is Outside Of The Grid!!!")#print a message
            dirname = os.path.dirname(__file__)#set dircetory
            filename = os.path.join(dirname, __file__)#set path to join directory and filename
            os.system('python "' + filename + '"')#reset python 
            exit()#exit out
        
    return route_list2#return the list back to the calling function
    
#Main program
flag = True
while flag:#create a while loop to run the main program 
    
    route_list = create_route_list(txt_file)#calls the route list function and returns the contents of the txt file
        
    route_list2 = starting_route_instruction(route_list)#calls the starting route instruction function and returns the list

    final_grid()#run create grid function

    print("\n\nCoordinates")#print a message
    print("-----------")#create an underline

    #print out the list of corrected coordinates in the list
    for a, b in zip(route_list2[::2], route_list2[1::2]):#unpack the zip and slice the first two values in the list
        print("("+str(a) + str (",") + str (b)+")")#print the two elements within brackets
    print("(!EXIT!) ")#print an exit 
         
    route_list = []#create a blank list
    route_list2 = []#create a blank list

'''Will only call from a terminal or an IDE'''
if __name__ == '__main__': 
    route_list.append(route)#add the list data to the route list
    create_route_list(txt_file)