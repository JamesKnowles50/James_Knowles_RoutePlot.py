'''This the Python Route Plotter program written for the final exercise for the JHub Coding Scheme 
   written by James Knowles and completed on 4/7/2022 vers 1.3''' 
   
import time#import the time module for pausing
import numpy as np#import the numpy library for later use

a, b = 5,5#sets variables a and b intially to 5
grid = []#create a list called grid
route_list = []#create a list called route_list
route_list2 = []
txt_file = ''#creates a blank
counter = 1#set counter to 1

def create_grid():
    '''This function creates a 12X12 grid and places a character marker at coordinates 12,12'''
    '''I wanted to show the route marker progressing through the grid using rudimentary animation'''
    time.sleep(0.3)#pause
    for x in range(6):#create a loop that runs from 1 to 6
        grid.append([" "] * 12)#add a string with a space 12 times to list in a single dimension
        grid.append([" "] * 12)#add a string with a space 12 times to list in creating a further dimension
    row_number, col_number = 12, 12#set varaibles for the row and coloumns numbers to be printed along the grid edges
    print("  ", end="")#print a space
    grid[a][b] = '\033[1;31;40mO\033[0;37;40m'#prints a red O at the variable coords onto the grid 
    grid.reverse()#invert the array for zero to start in the bottom left, rather than top left as standard
    for row in grid:#create a simple for loop within the grid list
        print("----"*13)#print a series of string character 13 times covering the top of the grid
        print(format(row_number,'02'), end="")#print a row number with a an extra zero, at the start of each subsequent row
        row_number -= 1#reduce the row number, so it starts at 1 and ends at 12. In fact it starts at zero
        for cell in row:#create a further loop at the end of the current row 
            print(" | {: >1}".format(cell), end="")#prints a vertical line in the middle
        print(" | ")#prints a further vertical line on the next line down
        print("  ", end="")#print a space on the next line down
    print("  ", end="")#print a space
    for col in range(1,col_number+1):#creates a loop from 1 to 13
        print(f"{col:02}  ", end="")#print a row of numbers along the bottom at a set number of spaces
    print("\n\n\n\n\n\n")

def final_grid():
    '''This function creates the final grid and prints out the complete route direction separately'''
    time.sleep(0.3)
    grid = []
    for x in range(6):#create a loop that runs from 1 to 6
        grid.append([" "] * 12)#add a string with a space 12 times to list in a single dimension
        grid.append([" "] * 12)#add a string with a space 12 times to list in creating a further dimension
    row_number, col_number = 12, 12#set varaibles for the row and coloumns numbers to be printed along the grid edges
    for j, k in zip(route_list3[::2],route_list3[1::2]):# a nice way to slice the frst two elements from a list
        j -= 1#take away 1
        k -= 1# take away 1
        grid[j][k] = '\033[1;31;40mX\033[0;37;40m'#print a red X based on the two coordinates taken from the list
    grid=np.rot90(grid, k=1, axes=(0, 1))#I had real trouble with the grid inverting itself. I decided to use the 
    #numpy rotate function, to rotate the array about its axis to make it sit on the correct plane.
    for row in grid:#create a simple for loop within the grid list
        print("----"*13)#print a series of string character 13 times covering the top of the grid
        print(format(row_number,'02'), end="")#print a row number with a an extra zero, at the start of each subsequent row
        row_number -= 1#reduce the row number, so it starts at 1 and ends at 12. In fact it starts at zero
        for cell in row:#create a further loop at the end of the current row 
            print(" | {: >1}".format(cell), end="")#prints a vertical line in the middle
        print(" | ")#prints a further vertical line on the next line down
        print("  ", end="")#print a space on the next line down
    print("  ", end="")#print a space
    for col in range(1,col_number+1):#creates a loop from 1 to 13
        print(f"{col:02}  ", end="")#print a row of numbers along the bottom at a set number of spaces
    user = input("\n\n!!Paused!! Press any Enter to continue")#create a pause

def create_route_list(file):
    '''Function that open a text file and stores its contents to a list and returns the list to the main program'''
    flag = True#create a boolean variable
    while flag:#set a conditional variable to create a loop
        #route_list = []#create a list called route_list
        for i in range(0,3):#small loop
            print ("\033[A                             \033[A")#deletes the newlines created above
        txt_file = input("Enter the name of the route instruction file or enter 'STOP' to end the program: ").lower().strip('.txt')
        if txt_file == 'stop':#create a condtional for the user input
            flag = False#boolean set to false and end the while loop
            S =  "\nThank You For Using The PYTHON ROUTE PLOTTER Program\n"#print a little message
            print("_".join(S).upper())#join the underscores with the main text
            exit()#exit the program
        try:#create a try and exception routine to check if the user entered file exists
            #open the chosen directory and the user selected file with a .txt extension, read only and named as list
            with open('C:/Users/Jimz/Documents/@@Udacity Programming/Routes/'+ txt_file +'.txt', 'r') as list:
                for line in list:#create a loop to run through the text file
                    route = line.strip('\n').lower()#remove newline added onto each direction, if added
                    route_list.append(route)#add the list data to the route list 
                    flag = False#boolean set to false ending the while loop
        except FileNotFoundError:#create an exception for a file not being found, print the file and stop the program
            s = "'"#create a string character for speech marks
            print(f"File {s}{txt_file}{s} not found.")#print out an error message
            user = (input("Would you like to try another file?(y/n)")).lower().strip()#add user input for file entry
            #if condition fails print a message and exit the program
            if user != "y":#conditional if user input is not equal to y
                flag = False#boolean set to false to stop the while loop
                S =  "\nThank You For Using The PYTHON ROUTE PLOTTER Program\n"#print a little message
                print("_".join(S).upper())#join the underscores with the main text
                exit()#exit the program
    else:# create an else exception if the file is located and return the new list back to the main program
        return route_list#return the route_list function back to the main call                 

def starting_route_instruction(a,b):
    '''Function that takes the positional data in the list and pass them to the create_grid fucntion'''
    time.sleep(0.5)#pause for a bit
    print("\n                \033[1;4m!Starting Route Coordinates!\033[0m\n")#print title
    global route_list2#make route_list a global variable
    x,y = route_list[0:2]#slice the route_list for the first two numbers to start the postition
    x,y = map(int,(x,y))#make the x,y variables integers within a list
    route_list.pop(0)#remove the 1st number from the list
    route_list.pop(0)#remove the 2nd number from the list
    a = y-1#make the number fit the array numbers and assign it a
    b = x-1#make the number fit the array numbers and assign it b
    route_list2.append(x)#update x to route_list2
    route_list2.append(y)#update y to route_list2
    return(a,b)#return the results of a,b back the calling function

def next_route_instruction(a,b):
    '''Function that takes the positional data in the list and pass them to the create_grid fucntion'''
    global route_list2#make the list global
    global route_list3#make the list global
    x,y = a,b#set the values of a,b to equal x,y
    a = y-1#make the number fit the array and assign it a
    b = x-1#make the number fit the array and assign it b
    y += 1#make the number fit the array 
    x += 1#make the number fit the array 
    if x < 1 or y < 1 or x > 12 or y > 12:#create a condtional if the route goes out of the grid bounds
        for i in range(0,5):#small loop
            print ("\033[A                             \033[A")#deletes the newlines created above
        print("    \033[1;4m!!!ERROR: The Route Is Outside Of The Grid!!!\033[0m\n\n")#print a message
        exit()#end the program
    route_list2.append(y)#add a variable y to the list 
    route_list2.append(x)#add a variable x to the list 
    route_list3 = route_list2
    return(a,b)#return the values of a and b back to the calling fucntion

#Main program
flag = True#set boolean
while flag:#create a while loop to run the main program 
    print("\n                \033[1;4mPYTHON ROUTE PLOTTER\033[0m\n")#temporary title      
    create_grid()#call the create grid function to set the grid area
    
    route_list = create_route_list(txt_file)#calls the roue list function and returns the contents of the txt file

    #creates the new a,b 
    a,b = starting_route_instruction(a,b)#calls the starting route function, grabs initial starting coords
    print("")

    while counter == 1:#create a conditional for the first set of coordinates in the list
    #update the grid data with the starting postion in the route file
        grid = []#blank the grid
        create_grid()#run create grid function
        counter +=2# make counter greater than 1 so it will run once

    #How to deal with the cardinal points uisng loops
    for cardinal in route_list: #create a loop running through the txt list
        if cardinal == 's':#conditional for South
            a = a - 1 #adjust the coordinate to fit the array
            b = b #proper coords  X
            y = a#sets a to y
            x = b#sets b to x
            x += 1#add 1 onto x
            y += 1#add 1 onto y
            grid = []#clear the grid
            next_route_instruction(a,b)#calls the next route function to start adding the rest of the coords
            create_grid()#call the create grid function again

        elif cardinal == 'w':#conditional for West
            a = a  #Y
            b = b - 1 #X
            x = a
            y = b
            x += 1#for print out only
            y += 1#for print out only
            grid = []
            next_route_instruction(a,b)
            create_grid()
                
        elif cardinal == 'e':#conditional for East
            a = a 
            b = b + 1
            x = a
            y = b
            x += 1
            y += 1
            grid = []
            next_route_instruction(a,b)
            create_grid()

                
        elif cardinal == 'n':#conditional for North
            a = a + 1 
            b = b
            x = a
            y = b
            x += 1
            y += 1
            grid = []
            next_route_instruction(a,b)
            create_grid()

    print("\nThe Complete Route Coordinates")#print a message
    print("--------------------------------")

    #print out the list of corrected coordinates in the list
    for j, k in zip(route_list2[::2], route_list2[1::2]):#unpack the zip and slice the first two values in the list
        print("("+str(j),", "+str(k)+")")#print the two elements within brackets
    print("(!EXIT!) ")#print an exit 

    print("\n\033[1;4m        !The route has completed successfully!        \033[0m\n")#print message
    time.sleep(0.5)#pause

    final_grid()#call the final grid function to print out the grid route

    grid = []#blank the list
    route_list = []#blank the list
    route_list2 = []#blank the list
    
